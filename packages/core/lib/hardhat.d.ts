/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "TypedMemView",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TypedMemView__factory>;
    getContractFactory(
      name: "GovernanceRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceRouter__factory>;
    getContractFactory(
      name: "Home",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Home__factory>;
    getContractFactory(
      name: "MerkleTreeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleTreeManager__factory>;
    getContractFactory(
      name: "NomadBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NomadBase__factory>;
    getContractFactory(
      name: "QueueManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QueueManager__factory>;
    getContractFactory(
      name: "Replica",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Replica__factory>;
    getContractFactory(
      name: "BadRecipient1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadRecipient1__factory>;
    getContractFactory(
      name: "BadRecipient2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadRecipient2__factory>;
    getContractFactory(
      name: "BadRecipient3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadRecipient3__factory>;
    getContractFactory(
      name: "BadRecipient4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadRecipient4__factory>;
    getContractFactory(
      name: "BadRecipient5",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadRecipient5__factory>;
    getContractFactory(
      name: "BadRecipient6",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadRecipient6__factory>;
    getContractFactory(
      name: "BadRecipientHandle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadRecipientHandle__factory>;
    getContractFactory(
      name: "MysteryMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MysteryMath__factory>;
    getContractFactory(
      name: "MysteryMathV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MysteryMathV1__factory>;
    getContractFactory(
      name: "MysteryMathV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MysteryMathV2__factory>;
    getContractFactory(
      name: "TestNomadBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestNomadBase__factory>;
    getContractFactory(
      name: "TestGovernanceMessage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestGovernanceMessage__factory>;
    getContractFactory(
      name: "TestGovernanceRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestGovernanceRouter__factory>;
    getContractFactory(
      name: "TestHome",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestHome__factory>;
    getContractFactory(
      name: "TestMerkle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestMerkle__factory>;
    getContractFactory(
      name: "TestMessage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestMessage__factory>;
    getContractFactory(
      name: "TestQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestQueue__factory>;
    getContractFactory(
      name: "TestRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRecipient__factory>;
    getContractFactory(
      name: "TestReplica",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestReplica__factory>;
    getContractFactory(
      name: "TestXAppConnectionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestXAppConnectionManager__factory>;
    getContractFactory(
      name: "UpdaterManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpdaterManager__factory>;
    getContractFactory(
      name: "UpgradeBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeBeacon__factory>;
    getContractFactory(
      name: "UpgradeBeaconController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeBeaconController__factory>;
    getContractFactory(
      name: "UpgradeBeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeBeaconProxy__factory>;
    getContractFactory(
      name: "Version0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Version0__factory>;
    getContractFactory(
      name: "XAppConnectionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XAppConnectionManager__factory>;
    getContractFactory(
      name: "IMessageRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageRecipient__factory>;
    getContractFactory(
      name: "IUpdaterManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUpdaterManager__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "TypedMemView",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TypedMemView>;
    getContractAt(
      name: "GovernanceRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceRouter>;
    getContractAt(
      name: "Home",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Home>;
    getContractAt(
      name: "MerkleTreeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleTreeManager>;
    getContractAt(
      name: "NomadBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NomadBase>;
    getContractAt(
      name: "QueueManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QueueManager>;
    getContractAt(
      name: "Replica",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Replica>;
    getContractAt(
      name: "BadRecipient1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BadRecipient1>;
    getContractAt(
      name: "BadRecipient2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BadRecipient2>;
    getContractAt(
      name: "BadRecipient3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BadRecipient3>;
    getContractAt(
      name: "BadRecipient4",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BadRecipient4>;
    getContractAt(
      name: "BadRecipient5",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BadRecipient5>;
    getContractAt(
      name: "BadRecipient6",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BadRecipient6>;
    getContractAt(
      name: "BadRecipientHandle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BadRecipientHandle>;
    getContractAt(
      name: "MysteryMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MysteryMath>;
    getContractAt(
      name: "MysteryMathV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MysteryMathV1>;
    getContractAt(
      name: "MysteryMathV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MysteryMathV2>;
    getContractAt(
      name: "TestNomadBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestNomadBase>;
    getContractAt(
      name: "TestGovernanceMessage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestGovernanceMessage>;
    getContractAt(
      name: "TestGovernanceRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestGovernanceRouter>;
    getContractAt(
      name: "TestHome",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestHome>;
    getContractAt(
      name: "TestMerkle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestMerkle>;
    getContractAt(
      name: "TestMessage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestMessage>;
    getContractAt(
      name: "TestQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestQueue>;
    getContractAt(
      name: "TestRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRecipient>;
    getContractAt(
      name: "TestReplica",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestReplica>;
    getContractAt(
      name: "TestXAppConnectionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestXAppConnectionManager>;
    getContractAt(
      name: "UpdaterManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpdaterManager>;
    getContractAt(
      name: "UpgradeBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeBeacon>;
    getContractAt(
      name: "UpgradeBeaconController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeBeaconController>;
    getContractAt(
      name: "UpgradeBeaconProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeBeaconProxy>;
    getContractAt(
      name: "Version0",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Version0>;
    getContractAt(
      name: "XAppConnectionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XAppConnectionManager>;
    getContractAt(
      name: "IMessageRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageRecipient>;
    getContractAt(
      name: "IUpdaterManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUpdaterManager>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
